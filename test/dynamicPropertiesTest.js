// Generated by CoffeeScript 2.7.0
(function() {
  var test;

  test = function() {
    var doRound, elem, settings;
    this.Maslosoft.Koe.Settings = (function() {
      class Settings extends Maslosoft.Binder.Model {};

      Settings.prototype._class = 'Maslosoft.Koe.Settings';

      Settings.prototype.lang = {};

      return Settings;

    }).call(this);
    settings = new Maslosoft.Koe.Settings();
    settings.lang.en = 'English';
    settings.lang.pl = 'Polish';
    binder.model.settings = settings;
    ko.track(binder.model);
    ko.applyBindings({
      model: binder.model
    }, document.getElementById('ko-binder'));
    doRound = function() {
      var index, json, model, res, results;
      json = JSON.stringify(binder.model);
      res = JSON.parse(json);
// Update or create new models
      results = [];
      for (index in res) {
        model = res[index];
        if (!!binder.model[index]) {
          results.push(ko.tracker.fromJs(binder.model[index], res[index]));
        } else {
          results.push(binder.model[index] = ko.tracker.factory(res[index]));
        }
      }
      return results;
    };
    elem = jQuery('#dynamicPropertiesTest');
    return describe('Test if will allow use of dynamic properties and do round-trip', function() {
      it('Should allow adding property', function() {
        settings = binder.model.settings;
        assert.equal(Object.keys(settings.lang).length, 2);
        settings.lang.fr = 'Francaise';
        settings.lang.de = 'Deutch';
        assert.equal(Object.keys(settings.lang).length, 4);
        assert.equal(elem.find('div').length, 4, 'That DOM elements are 4 before round trip');
        doRound();
        assert.equal(Object.keys(settings.lang).length, 4, 'That there are still 4 languages');
        return assert.equal(elem.find('div').length, 4, 'That DOM elements are 4 after round trip');
      });
      return it('Should allow removing property', function() {
        settings = binder.model.settings;
        assert.equal(Object.keys(settings.lang).length, 4);
        delete settings.lang.fr;
        delete settings.lang.de;
        delete settings.lang.pl;
        settings.lang.en = 'foo';
        assert.equal(Object.keys(settings.lang).length, 1);
        assert.equal(elem.find('div').length, 1, 'That DOM elements are 1 before round trip');
        doRound();
        assert.equal(Object.keys(settings.lang).length, 1, 'That there are now 1 languages');
        assert.equal(elem.find('div').length, 1, 'That DOM elements are 1 after round trip');
        return assert.equal(elem.find('div')[0].innerHTML, 'foo', 'That DOM elements is changed to foo');
      });
    });
  };

  setTimeout(test, 1000);

}).call(this);

//# sourceMappingURL=dynamicPropertiesTest.js.map
